#!/usr/bin/env python3

import struct
import sys
import json

from gi.repository import GLib

import pydbus


def make_streams_binary():
    sys.stdin = sys.stdin.detach()
    sys.stdout = sys.stdout.detach()


def parse_message():
    stdin = sys.stdin

    # Read the message length (first 4 bytes).
    length_bytes = stdin.read(4)
    if not len(length_bytes):
        sys.exit(0)

    # Unpack message length as 4 byte integer.
    length = struct.unpack('@i', length_bytes)[0]

    # Read the text (JSON object) of the message.
    text = stdin.read(length).decode("utf-8")
    return json.loads(text)

def send_message(msg):
    stdout = sys.stdout

    try:
        text = json.dumps(msg)
    except ValueError:
        return 0

    data = text.encode("utf-8")
    length_bytes = struct.pack("@i", len(data))
    return stdout.write(length_bytes) + stdout.write(data)


def iter_messages():
    while True:
        yield parse_message()


class MediaPlayer2:
    """
    <node name="/Media_Player">
    <interface name="org.mpris.MediaPlayer2">
        <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>

        <method name="Raise">
        </method>

        <method name="Quit">
        </method>

        <property name="CanQuit" type="b" access="read">
        </property>

        <property name="Fullscreen" type="b" access="readwrite">
            <annotation name="org.mpris.MediaPlayer2.property.optional" value="true"/>
        </property>

        <property name="CanSetFullscreen" type="b" access="read">
            <annotation name="org.mpris.MediaPlayer2.property.optional" value="true"/>
        </property>

        <property name="CanRaise" type="b" access="read">
        </property>

        <property name="HasTrackList" type="b" access="read">
        </property>

        <property name="Identity" type="s" access="read">
        </property>

        <!--
        <property name="DesktopEntry" type="s" access="read">
            <annotation name="org.mpris.MediaPlayer2.property.optional" value="true"/>
        </property>
        -->

        <property name="SupportedUriSchemes" type="as" access="read">
        </property>

        <property name="SupportedMimeTypes" type="as" access="read">
        </property>
    </interface>

    <interface name="org.mpris.MediaPlayer2.Player">

        <method name="Next">
        </method>

        <method name="Previous">
        </method>

        <method name="Pause">
        </method>

        <method name="PlayPause">
        </method>

        <method name="Stop">
        </method>

        <method name="Play">
        </method>

        <method name="Seek">
            <arg direction="in" type="x" name="Offset">
            </arg>
        </method>

        <method name="SetPosition">
            <arg direction="in" type="o" name="TrackId">
            </arg>
            <arg direction="in" type="x" name="Position">
            </arg>
        </method>

        <method name="OpenUri">
            <arg direction="in" type="s" name="Uri">
            </arg>
        </method>

        <property name="PlaybackStatus" type="s" access="read">
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
        </property>

        <property name="LoopStatus" type="s" access="readwrite">
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
            <annotation name="org.mpris.MediaPlayer2.property.optional" value="true"/>
        </property>

        <property name="Rate" type="d" access="readwrite">
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
        </property>

        <property name="Shuffle" type="b" access="readwrite">
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
            <annotation name="org.mpris.MediaPlayer2.property.optional" value="true"/>
        </property>

        <property name="Metadata" type="a{sv}" access="read">
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
        </property>

        <property name="Volume" type="d" access="readwrite">
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true" />
        </property>

        <property name="Position" type="x" access="read">
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
        </property>

        <property name="MinimumRate" type="d" access="read">
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
        </property>

        <property name="MaximumRate" type="d" access="read">
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
        </property>

        <property name="CanGoNext" type="b" access="read">
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
        </property>

        <property name="CanGoPrevious" type="b" access="read">
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
        </property>

        <property name="CanPlay" type="b" access="read">
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
        </property>

        <property name="CanPause" type="b" access="read">
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
        </property>

        <property name="CanSeek" type="b" access="read">
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
        </property>

        <property name="CanControl" type="b" access="read">
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
        </property>

        <signal name="Seeked">
            <arg name="Position" type="x">
            </arg>
        </signal>

    </interface>
    </node>
    """

    def __init__(self, tabid):
        self._tabid = tabid

        self.Identity = "youtube"
        self.HasTrackList = False

        self.CanRaise = False
        self.CanQuit = False
        self.Fullscreen = False
        self.CanSetFullscreen = False

        self.CanControl = True
        self.CanGoNext = False
        self.CanGoPrevious = False
        self.CanPlay = True
        self.CanPause = True
        self.CanSeek = True

        self.MinimumRate = 1
        self.MaximumRate = 1
        self.Rate = 1

        self.SupportedUriSchemes = ["http", "https", "ftp", "file"]
        self.SupportedMimeTypes = [
            "audio/mpeg",
            "audio/x-flac",
            # TODO: add more
        ]

        self.PlaybackStatus = "stopped"
        self.Metadata = {}
        self.Position = 0
        self.Volume = 1

        self.Shuffle = False
        self.LoopStatus = "None"

    PropertiesChanged = pydbus.generic.signal()
    Seeked = pydbus.generic.signal()

    def Raise(self):
        pass

    def Quit(self):
        pass

    def Play(self):
        self._send_message({ "cmd": "play" })

    def Pause(self):
        self._send_message({ "cmd": "pause" })

    def PlayPause(self):
        self._send_message({ "cmd": "playpause" })

    def Stop(self):
        self._send_message({ "cmd": "stop" })

    def Seek(self, offset):
        self._send_message({ "cmd": "seek", "data": { "offset": offset } })

    def Next(self):
        self._send_message({ "cmd": "next" })

    def Previous(self):
        self._send_message({ "cmd": "prev" })

    def _send_message(self, msg):
        msg["tabId"] = self._tabid
        send_message(msg)

    def _emit_changed(self, changed):
        self.PropertiesChanged("org.mpris.MediaPlayer2.Player", changed, [])


def main():
    make_streams_binary()

    playing = {}
    for msg in iter_messages():
        video = msg['video']
        playing[video['id']] = video
        if video['state'] == 'destroyed':
            del playing[video['id']]

        print(str(video), file=sys.stderr, flush=True)
        with open('/tmp/musicd-chrome', 'w') as fp:
            title = video['title'] if 'title' in video else ''
            fp.write(video['state'] + ' ' + title)
        with open('/tmp/musicd-chrome.json', 'w') as fp:
            info = list(playing.values())
            json.dump(info, fp, indent=4)


if __name__ == '__main__':
    mainloop = GLib.MainLoop()
    make_streams_binary()

    with open("/tmp/musicd-chrome.exc", "a") as f:
        f.write("Starting\n")

    bus = pydbus.SessionBus()
    # bus.publish("org.mpris.MediaPlayer2.chrome",
    #             ("/org/mpris/MediaPlayer2", player))

    players = {}

    def watchfunc(chan, condition):
        msg = parse_message()
        print(msg, file=sys.stderr, flush=True)

        if msg["tabId"] not in players:
            player = MediaPlayer2(msg["tabId"])
            players[msg["tabId"]] = player
            bus.publish("org.mpris.MediaPlayer2.chrome",
                        ("/org/mpris/MediaPlayer2", player))

        player = players[msg["tabId"]]

        if msg["type"] == "change":
            # player.Metadata.update(msg["data"])
            for key, value in msg["data"].items():
                if key == "url":
                    player.Metadata["xesam:url"] = pydbus.Variant("s", value)
                elif key == "thumb":
                    player.Metadata["mpris:artUrl"] = pydbus.Variant("s", value)
                elif key == "title":
                    player.Metadata["xesam:title"] = pydbus.Variant("s", value)

            player._emit_changed({"Metadata": player.Metadata})

        if msg["type"] == "update":
            if "state" in msg["data"]:
                player.PlaybackStatus = msg["data"]["state"]
                player._emit_changed({"PlaybackStatus": player.PlaybackStatus})
            elif "volume" in msg["data"]:
                player.Volume = msg["data"]["volume"]
                player._emit_changed({"Volume": player.Volume})
            elif "duration" in msg["data"]:
                player.Metadata["mpris:length"] = pydbus.Variant("x", msg["data"]["duration"])
                player._emit_changed({"Metadata": player.Metadata})

        with open("/tmp/musicd-chrome", "w") as f:
            json.dump(msg, f)

        return True

    make_streams_binary()
    chan = GLib.IOChannel.unix_new(sys.stdin.fileno())
    chan.add_watch(GLib.IOCondition.IN, watchfunc)
    # MainLoop.quit doesn't like being given extra arguments
    chan.add_watch(GLib.IOCondition.HUP, lambda *_: mainloop.quit())

    mainloop.run()

    with open("/tmp/musicd-chrome.exc", "a") as f:
        f.write("Killing\n")
